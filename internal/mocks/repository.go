// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	"github.com/golang/mock/gomock"
	reflect "reflect"


	models "github.com/llaxzi/gophermart/internal/models"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Bootstrap mocks base method.
func (m *MockRepository) Bootstrap(dsn string, steps int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bootstrap", dsn, steps)
	ret0, _ := ret[0].(error)
	return ret0
}

// Bootstrap indicates an expected call of Bootstrap.
func (mr *MockRepositoryMockRecorder) Bootstrap(dsn, steps interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bootstrap", reflect.TypeOf((*MockRepository)(nil).Bootstrap), dsn, steps)
}

// InsertOrder mocks base method.
func (m *MockRepository) InsertOrder(ctx context.Context, order models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOrder", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOrder indicates an expected call of InsertOrder.
func (mr *MockRepositoryMockRecorder) InsertOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrder", reflect.TypeOf((*MockRepository)(nil).InsertOrder), ctx, order)
}

// InsertUser mocks base method.
func (m *MockRepository) InsertUser(ctx context.Context, user models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUser indicates an expected call of InsertUser.
func (mr *MockRepositoryMockRecorder) InsertUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockRepository)(nil).InsertUser), ctx, user)
}

// ResetStatus mocks base method.
func (m *MockRepository) ResetStatus(ctx context.Context, orderNumber string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetStatus", ctx, orderNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetStatus indicates an expected call of ResetStatus.
func (mr *MockRepositoryMockRecorder) ResetStatus(ctx, orderNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetStatus", reflect.TypeOf((*MockRepository)(nil).ResetStatus), ctx, orderNumber)
}

// SelectBalance mocks base method.
func (m *MockRepository) SelectBalance(ctx context.Context, userLogin string) (models.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectBalance", ctx, userLogin)
	ret0, _ := ret[0].(models.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectBalance indicates an expected call of SelectBalance.
func (mr *MockRepositoryMockRecorder) SelectBalance(ctx, userLogin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectBalance", reflect.TypeOf((*MockRepository)(nil).SelectBalance), ctx, userLogin)
}

// SelectNewOrders mocks base method.
func (m *MockRepository) SelectNewOrders(ctx context.Context) ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectNewOrders", ctx)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectNewOrders indicates an expected call of SelectNewOrders.
func (mr *MockRepositoryMockRecorder) SelectNewOrders(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectNewOrders", reflect.TypeOf((*MockRepository)(nil).SelectNewOrders), ctx)
}

// SelectOrders mocks base method.
func (m *MockRepository) SelectOrders(ctx context.Context, userLogin string) ([]models.OrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectOrders", ctx, userLogin)
	ret0, _ := ret[0].([]models.OrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectOrders indicates an expected call of SelectOrders.
func (mr *MockRepositoryMockRecorder) SelectOrders(ctx, userLogin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectOrders", reflect.TypeOf((*MockRepository)(nil).SelectOrders), ctx, userLogin)
}

// SelectUser mocks base method.
func (m *MockRepository) SelectUser(ctx context.Context, userLogin string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUser", ctx, userLogin)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUser indicates an expected call of SelectUser.
func (mr *MockRepositoryMockRecorder) SelectUser(ctx, userLogin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUser", reflect.TypeOf((*MockRepository)(nil).SelectUser), ctx, userLogin)
}

// SelectWithdrawals mocks base method.
func (m *MockRepository) SelectWithdrawals(ctx context.Context, userLogin string) ([]models.WithdrawalResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectWithdrawals", ctx, userLogin)
	ret0, _ := ret[0].([]models.WithdrawalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectWithdrawals indicates an expected call of SelectWithdrawals.
func (mr *MockRepositoryMockRecorder) SelectWithdrawals(ctx, userLogin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectWithdrawals", reflect.TypeOf((*MockRepository)(nil).SelectWithdrawals), ctx, userLogin)
}

// UpdateOrder mocks base method.
func (m *MockRepository) UpdateOrder(ctx context.Context, order models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockRepositoryMockRecorder) UpdateOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockRepository)(nil).UpdateOrder), ctx, order)
}

// WithdrawBalance mocks base method.
func (m *MockRepository) WithdrawBalance(ctx context.Context, withdrawal models.Withdrawal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithdrawBalance", ctx, withdrawal)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithdrawBalance indicates an expected call of WithdrawBalance.
func (mr *MockRepositoryMockRecorder) WithdrawBalance(ctx, withdrawal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithdrawBalance", reflect.TypeOf((*MockRepository)(nil).WithdrawBalance), ctx, withdrawal)
}
